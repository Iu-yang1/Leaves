From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Lumine1909 <133463833+Lumine1909@users.noreply.github.com>
Date: Tue, 22 Apr 2025 23:32:41 +0800
Subject: [PATCH] Leaves entity ex data


diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index 48477efbd01bb1f8987d9a3ae195710e36b7294f..73d98344036291ea87d7b1518f6fbc39f43318bf 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -351,6 +351,8 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     public boolean isTemporarilyActive;
     public long activatedImmunityTick = Integer.MIN_VALUE;
 
+    private CompoundTag leavesData = new CompoundTag(); // Leaves - Leaves ex data
+
     public void inactiveTick() {
     }
     // Paper end - EAR 2
@@ -2512,6 +2514,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 compound.putBoolean("Paper.FreezeLock", true);
             }
             // Paper end
+            compound.put("Leaves.Data", leavesData); // Leaves - leaves ex data
             return compound;
         } catch (Throwable var8) {
             CrashReport crashReport = CrashReport.forThrowable(var8, "Saving entity NBT");
@@ -2629,6 +2632,11 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 freezeLocked = compound.getBooleanOr("Paper.FreezeLock", false);
             }
             // Paper end
+            // Leaves start - leaves ex data
+            if (compound.contains("Leaves.Data")) {
+                leavesData = compound.getCompoundOrEmpty("Leaves.Data");
+            }
+            // Leaves end - leaves ex data
         } catch (Throwable var8) {
             CrashReport crashReport = CrashReport.forThrowable(var8, "Loading entity NBT");
             CrashReportCategory crashReportCategory = crashReport.addCategory("Entity being loaded");
@@ -5097,4 +5105,9 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         return ((ServerLevel) this.level()).isPositionEntityTicking(this.blockPosition());
     }
     // Paper end - Expose entity id counter
+    // Leaves start - leaves ex data
+    public CompoundTag getLeavesData() {
+        return leavesData;
+    }
+    // Leaves end - leaves ex data
 }
